import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import imagenet_utils
from PIL import Image
import os
import subprocess
from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Define the path and filename for the captured image
image_path = '/home/pi/Desktop/capture_image'
image_file_name = 'captured_image.jpg'
filepath = os.path.join(image_path, image_file_name)

# Load the MobileNet model
mobileNetModel = tf.keras.applications.mobilenet.MobileNet()

def prepare_image(img):
    """
    Preprocesses the input image for prediction.

    This function resizes the image to (224, 224) pixels,
    converts it to a NumPy array, and expands the dimensions
    to match the input shape of the MobileNet model.

    Parameters:
    - img (PIL.Image.Image): The input image.

    Returns:
    - numpy.ndarray: The preprocessed image as a NumPy array.
    """
    img = img.resize((224, 224))
    img_array = image.img_to_array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    return tf.keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)

def classify_image(img):
    """
    Performs image classification using the MobileNet model.

    This function preprocesses the input image, feeds it to the
    MobileNet model, and returns the predicted results.

    Parameters:
    - img (PIL.Image.Image): The input image.

    Returns:
    - numpy.ndarray: The predicted results.
    """
    preprocessed_image = prepare_image(img)
    results = mobileNetModel.predict(preprocessed_image)
    return results

def capture_image():
    """
    Captures an image using the Raspberry Pi Camera.

    This function uses the 'libcamera-still' command to capture
    an image and saves it to the specified filepath.

    Returns:
    - str: The path where the image is saved.
    """
    cap_img = ["libcamera-still", "-0", filepath]
    try:
        subprocess.run(cap_img, check=True)
        print(f"Saved image to {filepath}")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")
    return image_path

@app.route('/classify', methods=['GET'])
def classify():
    """
    Route to capture an image, classify it, and display the result.

    This route captures an image using the Raspberry Pi Camera,
    performs image classification using the MobileNet model,
    and returns the top predicted category with its confidence.

    Returns:
    - str: The JSON representation of the top predicted category.
    """
    capture_image()
    img = Image.open(image_path + image_file_name)
    result = classify_image(img)
    decoded_result = imagenet_utils.decode_predictions(result)
    serializable_results = []
    for category in decoded_result[0]:  # Assuming batch size of 1
        category_dict = {
            'name': category[1],
            'confidence': float(category[2])  # Convert numpy float32 to Python float
        }
        serializable_results.append(category_dict)

    return jsonify(serializable_results[0])

if __name__ == '__main__':
    app.run(debug=True, host='172.20.10.2', port=5000)